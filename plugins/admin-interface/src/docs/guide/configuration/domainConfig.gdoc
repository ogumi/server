You can configure the administration screens with a specific DSL that can be configure either in
your @Config.groovy@ or in classes of type "Admin" that also allows the redefinition of some
methods.

h3. Configuration on @Config.groovy@ file

{code}
grails.plugin.admin.domain.Speaker = {
    create includes: ["name", "description", "dateCreated", "endDate"],
    widget "birthDate", "net.kaleidos.plugins.admin.widget.DateInputWidget", dateFormat: "yyyyMMdd"
}
{code}

h3. Configuration on "Admin" entities

Edit @Config.groovy@  to associate your admin class with the domain entity that manage.

{code}
grails.plugin.admin.domain.Speaker = "conferences.SpeakerAdmin"
{code}

and create admin class.

Place it under @grails-app/admin@ directory.

_Note: You can place your admin class wherever you want in @classpath@,_
_but we recommend this to possible future artifacts control_

{code}
package conferences

class SpeakerAdmin {
    static options = {
        create includes: ["name", "description", "dateCreated", "endDate"],
        widget "birthDate", "net.kaleidos.plugins.admin.widget.DateInputWidget", dateFormat: "yyyyMMdd"
    }

}
{code}


h4. Include properties

You can select which properties the administration will display on a specific operation.

The order will be preserved in the form.

{code}
grails.plugin.admin.domain.Speaker = {
    list includes: ["name", "description", "dateCreated", "endDate"]
    create includes: ["name", "description"]
    edit includes: ["name", "description"]
}
{code}


h4. Exclude Properties

You can customize which properties will be excluded from the administration screens.

{code}
grails.plugin.admin.domain.Speaker = {
    list excludes: ["startDate", "endDate"]
    create excludes: ["startDate", "endDate"]
    edit excludes: ["startDate", "endDate"]
}
{code}

h4. Properties Groups

All the properties for a domain can be visually grouped so they have a logic structure.

{code}
grails.plugin.admin.domain.Talk = {
    groups {
        "Speaker" fields: [ 'speaker' ]
        "Talk Info" style:"collapse", fields: [ 'talkDate', 'talkTime', 'room' ]
    }
}
{code}

If you don't put a property inside a group it will be displayed at the beginning of the form without
any group.

h4. Passing properties to widgets

Some widgets need some internal properties. Also, there are properties that you can pass to any widget.
In order to do so, you must specify them on the configuration

{code}
grails.plugin.admin.domain.Conference = {
    widget "name",  help:"This is a help text"
}
{code}


{code}
grails.plugin.admin.domain.Talk = {
    widget "talkDate", dateFormat:"dd/MM/yyyy"
}
{code}


h4. Specify a widget

If you want to select a specific widget for a property (for example, to use the
PasswordInputWidget instead of the default TextInputWidget) you can use this configuration.
Further documentation and a list of all the builtin widgets on the [Built In Widgets|guide:builtInWidgets] section.

{code}
grails.plugin.admin.domain.User = {
    widget "password", "PasswordInputWidget"
}
{code}


h4. Custom widgets

For some properties the default editor/renderer may not be enough. You can customize this
behaviour writing your own widget.
Further documentation on the [Custom Widgets|guide:customWidgets] section.

{code}
grails.plugin.admin.domain.Conference = {
    widget "coordinates", "sample.MapWidget", height:400, width:600
}
{code}
