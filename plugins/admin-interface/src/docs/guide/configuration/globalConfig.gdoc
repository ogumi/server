h4. Domains List

_*Necessary*_

Not mandatory, but necessary to start working with admin

You have to explicitely set the domains that your application is going to manage.
The property is a list of strings containing the full class name of your domains.

By default it contains an empty list.

{code}
grails.plugin.admin.domains = [
    "conferences.Speaker",
    "conferences.Talk"
]
{code}

Optionaly, you can group your domains so they are divided into logical groups.

{code}
grails.plugin.admin.domains."Conference Management" = [
    "conferences.Conference",
    "conferences.Talk"
]

grails.plugin.admin.domains."People" = [
    "conferences.Attendee",
    "conferences.Speaker"
]

grails.plugin.admin.domains."Infrastructures" = [
    "conferences.Building",
    "conferences.Room"
]
{code}

h4. Admin URL Access Root

_Optional_

A good security practice is not to use a "standard" URI to access your administration backend.

Grails-Admin allows you to customize the endpoint so it uses a custom one.

By default the value is /admin

{code}
grails.plugin.admin.accessRoot = "/admin"
{code}

h4. Allow Default Configuration

When a domain has a relationship with another domain (i.e. 1-1 relationship) if the related object
has not been defined in the managed domains list you will not be able to interact with it by default.

You can explicitely activate default configuration on objects that are not defined in your domain list
by using this property.

_Optional_
{code}
grails.plugin.admin.allowDefaultConfig = false
{code}

h4. Security. Access role

_Optional_

The default role required for a user to access the admin is "ROLE_ADMIN" but you can customize
to use any role defined with your application.

{code}
grails.plugin.admin.security.role = "ROLE_ADMIN"
{code}

h4. Security. Forbid unsecured admin on Production environment

By default the plugin checks if your application is secured or not (currently using Spring Security 1.x
and Spring Security 2.x).

If your application is not secured, by default, the plugin will throw an exception when it's boostraped
on production environments.

You can override this behaviour by setting this property to "false"

_Optional_
{code}
grails.plugin.admin.security.forbidUnsecureProduction = true
{code}
